/* CLIPSParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. CLIPSParserTokenManager.java */
package org.jamocha.parser.clips;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import org.jamocha.rete.BoundParam;
import org.jamocha.rete.Constants;
import org.jamocha.rete.Deftemplate;
import org.jamocha.rete.Defcube;
import org.jamocha.rete.Defdimension;
import org.jamocha.rete.Defmeasure;
import org.jamocha.rete.Function;
import org.jamocha.rete.FunctionParam2;
import org.jamocha.rete.MultiSlot;
import org.jamocha.rete.Parameter;
import org.jamocha.rete.ParameterUtils;
import org.jamocha.rete.Rete;
import org.jamocha.rete.ShellBoundParam;
import org.jamocha.rete.Slot;
import org.jamocha.rete.ValueParam;
import org.jamocha.rete.functions.ShellFunction;
import org.jamocha.rule.Action;
import org.jamocha.rule.AndCondition;
import org.jamocha.rule.AndLiteralConstraint;
import org.jamocha.rule.BoundConstraint;
import org.jamocha.rule.Condition;
import org.jamocha.rule.Constraint;
import org.jamocha.rule.Defrule;
import org.jamocha.rule.Defquery;
import org.jamocha.rule.GraphQuery;
import org.jamocha.rule.ExistCondition;
import org.jamocha.rule.FunctionAction;
import org.jamocha.rule.LiteralConstraint;
import org.jamocha.rule.MultiValue;
import org.jamocha.rule.MultipleCondition;
import org.jamocha.rule.ObjectCondition;
import org.jamocha.rule.OnlyCondition;
import org.jamocha.rule.OrLiteralConstraint;
import org.jamocha.rule.PredicateConstraint;
import org.jamocha.rule.RuleProperty;
import org.jamocha.rule.CubeQueryCondition;
import org.jamocha.rule.TestCondition;
import org.jamocha.rule.TemporalCondition;
import org.jamocha.rete.functions.DeffunctionFunction;

/** Token Manager. */
public class CLIPSParserTokenManager implements CLIPSParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active1 & 0x10000L) != 0L)
            return 0;
         if ((active1 & 0x200000000L) != 0L)
            return 59;
         if ((active1 & 0x40000L) != 0L)
            return 60;
         if ((active1 & 0x370L) != 0L)
         {
            jjmatchedKind = 98;
            return 31;
         }
         if ((active1 & 0x100000L) != 0L)
            return 61;
         if ((active0 & 0xfffffffffffe0000L) != 0L || (active1 & 0xa1001c8fL) != 0L)
         {
            jjmatchedKind = 98;
            return 61;
         }
         return -1;
      case 1:
         if ((active0 & 0xfffffffffffe0000L) != 0L || (active1 & 0x20001dffL) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 1;
            return 61;
         }
         if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 1;
            return 30;
         }
         if ((active1 & 0x81000000L) != 0L)
            return 61;
         return -1;
      case 2:
         if ((active0 & 0x100000000000000L) != 0L)
            return 31;
         if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 2;
            return 29;
         }
         if ((active1 & 0x20001000L) != 0L)
            return 61;
         if ((active0 & 0x800800000400000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 2;
            return 31;
         }
         if ((active0 & 0xf6ff7fffffbe0000L) != 0L || (active1 & 0xdffL) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 2;
            return 61;
         }
         return -1;
      case 3:
         if ((active0 & 0x7ce5f7effffc0000L) != 0L || (active1 & 0xc3dL) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 3;
            return 61;
         }
         if ((active1 & 0x42L) != 0L)
            return 31;
         if ((active0 & 0x8202000000020000L) != 0L || (active1 & 0x380L) != 0L)
            return 61;
         if ((active0 & 0x18081000000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 3;
            return 31;
         }
         return -1;
      case 4:
         if ((active0 & 0x2000010000000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 4;
            return 31;
         }
         if ((active0 & 0x100000000000L) != 0L || (active1 & 0xc01L) != 0L)
            return 61;
         if ((active0 & 0x5cfdeefffffc0000L) != 0L || (active1 & 0x3cL) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 4;
            return 61;
         }
         return -1;
      case 5:
         if ((active0 & 0x7c79ec7fffcc0000L) != 0L || (active1 & 0x30L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 98;
               jjmatchedPos = 5;
            }
            return 61;
         }
         if ((active0 & 0x20000000000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 98;
               jjmatchedPos = 5;
            }
            return 31;
         }
         if ((active0 & 0x300000L) != 0L)
            return 31;
         if ((active0 & 0x84018000000000L) != 0L || (active1 & 0xcL) != 0L)
            return 61;
         return -1;
      case 6:
         if ((active0 & 0x7438aa3d95e80000L) != 0L || (active1 & 0x30L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 6;
            return 61;
         }
         if ((active0 & 0x800004040000000L) != 0L)
            return 31;
         if ((active0 & 0x4140022a040000L) != 0L)
            return 61;
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 6;
            return 31;
         }
         return -1;
      case 7:
         if ((active0 & 0x3428ae3905c00000L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 98;
               jjmatchedPos = 7;
            }
            return 61;
         }
         if ((active0 & 0x4010000410000000L) != 0L || (active1 & 0x30L) != 0L)
            return 61;
         if ((active0 & 0x80280000L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 98;
               jjmatchedPos = 7;
            }
            return 31;
         }
         return -1;
      case 8:
         if ((active0 & 0x3400ae3881e00000L) != 0L || (active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 8;
            return 61;
         }
         if ((active0 & 0x8000000000000L) != 0L)
            return 31;
         if ((active0 & 0x20000104080000L) != 0L)
            return 61;
         return -1;
      case 9:
         if ((active0 & 0x2000801000000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 9;
            return 31;
         }
         if ((active0 & 0x1400262881a00000L) != 0L || (active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 9;
            return 61;
         }
         if ((active0 & 0x80000400000L) != 0L)
            return 61;
         return -1;
      case 10:
         if ((active0 & 0x1080000000L) != 0L)
            return 61;
         if ((active0 & 0x3400a62801a00000L) != 0L || (active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 10;
            return 61;
         }
         return -1;
      case 11:
         if ((active0 & 0x1000000000000000L) != 0L)
            return 61;
         if ((active0 & 0x2400a62801a00000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 11;
            return 61;
         }
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 11;
            return 31;
         }
         return -1;
      case 12:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 12;
            return 31;
         }
         if ((active0 & 0x2000a00800000000L) != 0L)
            return 61;
         if ((active0 & 0x400042001a00000L) != 0L || (active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 12;
            return 61;
         }
         return -1;
      case 13:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 13;
            return 31;
         }
         if ((active0 & 0x400022000800000L) != 0L)
            return 61;
         if ((active0 & 0x1200000L) != 0L || (active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 13;
            return 61;
         }
         return -1;
      case 14:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 14;
            return 31;
         }
         if ((active0 & 0x40000200000L) != 0L)
            return 61;
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 14;
            return 61;
         }
         return -1;
      case 15:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 15;
            return 61;
         }
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 15;
            return 31;
         }
         return -1;
      case 16:
         if ((active0 & 0x1000000L) != 0L || (active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 16;
            return 61;
         }
         return -1;
      case 17:
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 17;
            return 61;
         }
         if ((active0 & 0x1000000L) != 0L)
            return 61;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000L);
      case 38:
         return jjStopAtPos(0, 94);
      case 40:
         return jjStopAtPos(0, 6);
      case 41:
         return jjStopAtPos(0, 7);
      case 42:
         return jjStopAtPos(0, 83);
      case 43:
         return jjStopAtPos(0, 81);
      case 45:
         return jjStartNfaWithStates_0(0, 82, 60);
      case 47:
         return jjStartNfaWithStates_0(0, 84, 61);
      case 59:
         return jjStartNfaWithStates_0(0, 80, 0);
      case 60:
         jjmatchedKind = 86;
         return jjMoveStringLiteralDfa1_0(0x0L, 0xa00c000L);
      case 61:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x802000L);
      case 62:
         jjmatchedKind = 85;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x40000L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x400L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x0L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x2000000000000L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x5L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0xf80000L, 0x20000000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x20000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x7000000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x7ff8000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x70000000000L, 0x1000000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x800L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x1c000000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x160000000000000L, 0x1000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x80000000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x3c00000000000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0xc000000000000000L, 0xaL);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x370L);
      case 124:
         return jjStopAtPos(0, 96);
      case 126:
         return jjStartNfaWithStates_0(0, 97, 59);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 45:
         if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(1, 79);
         break;
      case 60:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000L);
      case 61:
         if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(1, 87);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 89);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 90);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 92);
         break;
      case 62:
         if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(1, 77);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 91);
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400L);
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x2008000040000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000280000000000L, active1, 0x800L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0xac00007ff8000000L, active1, 0x70L);
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L, active1, 0x1000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L, active1, 0x2L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x200800000000000L, active1, 0x20000000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x165000002000000L, active1, 0L);
      case 113:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(1, 88, 61);
         break;
      case 114:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(1, 95, 61);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x300000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x1018000004400000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x50000000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x208L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa3_0(active0, 0x60000000000000L, active1, 0L);
      case 61:
         if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(2, 78);
         break;
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400L);
      case 77:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000040000L, active1, 0x1L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4L);
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L, active1, 0x80L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x80008000000L, active1, 0L);
      case 100:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(2, 93, 61);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x25ff0000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000080000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L, active1, 0L);
      case 108:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 76, 61);
         return jjMoveStringLiteralDfa3_0(active0, 0x7218000000800000L, active1, 0x800L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000002000000L, active1, 0x38L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000020000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L, active1, 0x200L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x202000300000L, active1, 0x40L);
      case 116:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 56, 31);
         return jjMoveStringLiteralDfa3_0(active0, 0x800800000400000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L, active1, 0L);
      case 66:
         return jjMoveStringLiteralDfa4_0(active0, 0x80008000000000L, active1, 0L);
      case 69:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 71, 61);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L, active1, 0L);
      case 71:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 49, 61);
         break;
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4L);
      case 76:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x2020004000000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x2030000000L, active1, 0L);
      case 100:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 17, 61);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 63, 61);
         break;
      case 101:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 72, 61);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 73, 61);
         return jjMoveStringLiteralDfa4_0(active0, 0x1400820004300000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0xc0000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x4005040001000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000008000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x102000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0xc00000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x30L);
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000200080000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L, active1, 0x800L);
      case 116:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 65, 31);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 70, 31);
         return jjMoveStringLiteralDfa4_0(active0, 0x18081000000000L, active1, 0L);
      case 121:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 57, 61);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000080000400000L, active1, 0L);
      case 69:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 74, 61);
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000040000L, active1, 0L);
      case 71:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4L);
      case 84:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 44, 61);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(4, 64, 61);
         break;
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000004a000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x1020000000000L, active1, 0L);
      case 101:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 75, 61);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000201000080000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x18000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000100000000L, active1, 0x38L);
      case 113:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x842800300000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000010000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x46a0000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000L, active1, 0L);
      case 69:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 39, 61);
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000L, active1, 0L);
      case 71:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 66, 61);
         break;
      case 82:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 55, 61);
         break;
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x1040810000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000020000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000040000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x200100000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000400800000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000082001000000L, active1, 0L);
      case 108:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(5, 67, 61);
         return jjMoveStringLiteralDfa6_0(active0, 0x4200000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000082000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L, active1, 0x30L);
      case 115:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 40, 61);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x20000200000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000800000000000L, active1, 0L);
      case 121:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 50, 61);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000200000L, active1, 0L);
      case 78:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(6, 18, 61);
         break;
      case 82:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 46, 61);
         break;
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000080000L, active1, 0x30L);
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000080000000L, active1, 0L);
      case 100:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 25, 61);
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L, active1, 0L);
      case 101:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 27, 61);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 29, 61);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 33, 61);
         return jjMoveStringLiteralDfa7_0(active0, 0x1400000004000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000L, active1, 0L);
      case 108:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 48, 61);
         return jjMoveStringLiteralDfa7_0(active0, 0x18000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x20080001000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L, active1, 0L);
      case 112:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 54, 61);
         return jjMoveStringLiteralDfa7_0(active0, 0x1800000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000L, active1, 0L);
      case 116:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(6, 30, 31);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 38, 31);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 59, 31);
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0x20080000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 52, 61);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 62, 61);
         return jjMoveStringLiteralDfa8_0(active0, 0x2000002000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000L, active1, 0L);
      case 108:
         if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x801100000000L, active1, 0x10L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x1400000004000000L, active1, 0L);
      case 115:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(7, 28, 61);
         break;
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x80280000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000L, active1, 0L);
      case 121:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(7, 34, 61);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa9_0(active0, 0x2400802001000000L, active1, 0x10L);
      case 97:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 53, 61);
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(8, 19, 61);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(8, 32, 61);
         return jjMoveStringLiteralDfa9_0(active0, 0x2a0000200000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000000L, active1, 0L);
      case 113:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 51, 31);
         break;
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000L, active1, 0L);
      case 121:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(8, 26, 61);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000000800000L, active1, 0x10L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000200000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000000L, active1, 0L);
      case 115:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(9, 22, 61);
         break;
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000801000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000L, active1, 0L);
      case 120:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 43, 61);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x10L);
      case 100:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 36, 61);
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000800001000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0x400002000800000L, active1, 0L);
      case 110:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(10, 31, 61);
         break;
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000200000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x22000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa12_0(active0, 0x40000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000800000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 60, 61);
         break;
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0x200801000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x10L);
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1);
      return 12;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x40000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 47, 61);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 61, 61);
         return jjMoveStringLiteralDfa13_0(active0, 0x1800000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa13_0(active0, 0x400000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x10L);
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0x200000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x20000000000L, active1, 0L);
      case 121:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(12, 35, 61);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 45, 61);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1);
      return 13;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 58, 61);
         return jjMoveStringLiteralDfa14_0(active0, 0x200000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa14_0(active0, 0x1000000L, active1, 0L);
      case 101:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 41, 61);
         break;
      case 115:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(13, 23, 61);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 37, 61);
         break;
      case 116:
         return jjMoveStringLiteralDfa14_0(active0, 0x40000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(12, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1);
      return 14;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x10L);
      case 101:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 42, 61);
         break;
      case 108:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(14, 21, 61);
         break;
      case 116:
         return jjMoveStringLiteralDfa15_0(active0, 0x1000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(13, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, active1);
      return 15;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa16_0(active0, 0x1000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, active1);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(14, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, active1);
      return 16;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x10L);
      case 111:
         return jjMoveStringLiteralDfa17_0(active0, 0x1000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, active1);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(15, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, active1);
      return 17;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(17, 24, 61);
         break;
      case 111:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, active1);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(16, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, 0L, active1);
      return 18;
   }
   switch(curChar)
   {
      case 110:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(18, 68, 61);
         break;
      default :
         break;
   }
   return jjStartNfa_0(17, 0L, active1);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec9 = {
   0x1600L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec10 = {
   0x0L, 0xffc000000000L, 0x0L, 0xffc000000000L
};
static final long[] jjbitVec11 = {
   0x0L, 0x3ff00000000L, 0x0L, 0x3ff000000000000L
};
static final long[] jjbitVec12 = {
   0x0L, 0xffc000000000L, 0x0L, 0xff8000000000L
};
static final long[] jjbitVec13 = {
   0x0L, 0xffc000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec14 = {
   0x0L, 0x3ff0000L, 0x0L, 0x3ff0000L
};
static final long[] jjbitVec15 = {
   0x0L, 0x3ffL, 0x0L, 0x0L
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 59;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 59:
               case 28:
                  if ((0x7ffe01000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddTwoStates(28, 32); }
                  break;
               case 31:
                  if ((0x7ffe01000000000L & l) != 0L)
                  {
                     if (kind > 101)
                        kind = 101;
                     { jjCheckNAdd(35); }
                  }
                  if ((0x7ffe01000000000L & l) != 0L)
                  {
                     if (kind > 98)
                        kind = 98;
                     { jjCheckNAddTwoStates(28, 32); }
                  }
                  break;
               case 60:
                  if ((0x7ffe01000000000L & l) != 0L)
                  {
                     if (kind > 101)
                        kind = 101;
                     { jjCheckNAdd(35); }
                  }
                  if ((0x7ffe01000000000L & l) != 0L)
                  {
                     if (kind > 98)
                        kind = 98;
                     { jjCheckNAddTwoStates(28, 32); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  else if (curChar == 46)
                     { jjCheckNAdd(7); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     { jjCheckNAdd(37); }
                  }
                  break;
               case 30:
                  if ((0x7ffe01000000000L & l) != 0L)
                  {
                     if (kind > 101)
                        kind = 101;
                     { jjCheckNAdd(35); }
                  }
                  if ((0x7ffe01000000000L & l) != 0L)
                  {
                     if (kind > 98)
                        kind = 98;
                     { jjCheckNAddTwoStates(28, 32); }
                  }
                  break;
               case 5:
                  if ((0x7ffe01000000000L & l) != 0L)
                  {
                     if (kind > 101)
                        kind = 101;
                     { jjCheckNAdd(35); }
                  }
                  else if (curChar == 39)
                     { jjCheckNAddStates(6, 8); }
                  else if (curChar == 34)
                     { jjCheckNAddStates(9, 11); }
                  else if (curChar == 59)
                     jjstateSet[jjnewStateCnt++] = 0;
                  else if (curChar == 63)
                     { jjCheckNAddStates(12, 14); }
                  if ((0x7ffe01000000000L & l) != 0L)
                  {
                     if (kind > 98)
                        kind = 98;
                     { jjCheckNAddTwoStates(28, 32); }
                  }
                  else if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 21;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     { jjCheckNAddStates(15, 21); }
                  }
                  else if (curChar == 45)
                     { jjCheckNAddStates(22, 25); }
                  else if (curChar == 36)
                  {
                     if (kind > 99)
                        kind = 99;
                  }
                  else if (curChar == 46)
                     { jjCheckNAdd(7); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 100)
                        kind = 100;
                  }
                  else if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 61:
                  if ((0x7ffe01000000000L & l) != 0L)
                  {
                     if (kind > 101)
                        kind = 101;
                     { jjCheckNAdd(35); }
                  }
                  if ((0x7ffe01000000000L & l) != 0L)
                  {
                     if (kind > 98)
                        kind = 98;
                     { jjCheckNAddTwoStates(28, 32); }
                  }
                  break;
               case 29:
                  if ((0x7ffe01000000000L & l) != 0L)
                  {
                     if (kind > 101)
                        kind = 101;
                     { jjCheckNAdd(35); }
                  }
                  if ((0x7ffe01000000000L & l) != 0L)
                  {
                     if (kind > 98)
                        kind = 98;
                     { jjCheckNAddTwoStates(28, 32); }
                  }
                  break;
               case 0:
                  if (curChar != 59)
                     break;
                  if (kind > 5)
                     kind = 5;
                  { jjCheckNAddStates(26, 28); }
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  { jjCheckNAddStates(26, 28); }
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 3:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if (curChar == 46)
                     { jjCheckNAdd(7); }
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  { jjCheckNAddTwoStates(7, 8); }
                  break;
               case 9:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(10); }
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  { jjCheckNAdd(10); }
                  break;
               case 11:
               case 14:
                  if (curChar == 34)
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 12:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 15:
                  if (curChar == 34 && kind > 11)
                     kind = 11;
                  break;
               case 16:
               case 19:
                  if (curChar == 39)
                     { jjCheckNAddStates(6, 8); }
                  break;
               case 17:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     { jjCheckNAddStates(6, 8); }
                  break;
               case 20:
                  if (curChar == 39 && kind > 11)
                     kind = 11;
                  break;
               case 21:
                  if (curChar == 42)
                     { jjCheckNAdd(22); }
                  break;
               case 22:
                  if ((0x3ff001000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(22, 23); }
                  break;
               case 23:
                  if (curChar == 42 && kind > 14)
                     kind = 14;
                  break;
               case 24:
                  if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 25:
                  if (curChar == 63)
                     { jjCheckNAdd(26); }
                  break;
               case 26:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  { jjCheckNAdd(26); }
                  break;
               case 27:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 33:
                  if (curChar == 36 && kind > 99)
                     kind = 99;
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L && kind > 100)
                     kind = 100;
                  break;
               case 35:
                  if ((0x7ffe01000000000L & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  { jjCheckNAdd(35); }
                  break;
               case 36:
                  if (curChar == 45)
                     { jjCheckNAddStates(22, 25); }
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjCheckNAdd(37); }
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 39:
                  if (curChar == 45)
                     { jjCheckNAdd(38); }
                  break;
               case 40:
                  if (curChar != 46)
                     break;
                  if (kind > 9)
                     kind = 9;
                  { jjCheckNAddTwoStates(41, 42); }
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  { jjCheckNAddTwoStates(41, 42); }
                  break;
               case 43:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(44); }
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  { jjCheckNAdd(44); }
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 46:
                  if (curChar == 45)
                     { jjCheckNAdd(45); }
                  break;
               case 48:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(49); }
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  { jjCheckNAdd(49); }
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjCheckNAddStates(15, 21); }
                  break;
               case 51:
                  if (curChar == 63)
                     { jjCheckNAddStates(12, 14); }
                  break;
               case 52:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  { jjCheckNAdd(52); }
                  break;
               case 53:
                  if ((0x3ff001000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(53, 55); }
                  break;
               case 54:
                  if (curChar == 58 && kind > 13)
                     kind = 13;
                  break;
               case 55:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if ((0x3ff001000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(56, 58); }
                  break;
               case 58:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 59:
                  if ((0x47fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 98)
                        kind = 98;
                     { jjCheckNAddTwoStates(28, 32); }
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if ((0x47fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 98)
                        kind = 98;
                     { jjCheckNAddTwoStates(28, 32); }
                  }
                  if ((0x7fffffe97fffffeL & l) != 0L)
                  {
                     if (kind > 101)
                        kind = 101;
                     { jjCheckNAdd(35); }
                  }
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 30;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 60:
                  if ((0x47fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 98)
                        kind = 98;
                     { jjCheckNAddTwoStates(28, 32); }
                  }
                  if ((0x7fffffe97fffffeL & l) != 0L)
                  {
                     if (kind > 101)
                        kind = 101;
                     { jjCheckNAdd(35); }
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 30:
                  if ((0x47fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 98)
                        kind = 98;
                     { jjCheckNAddTwoStates(28, 32); }
                  }
                  if ((0x7fffffe97fffffeL & l) != 0L)
                  {
                     if (kind > 101)
                        kind = 101;
                     { jjCheckNAdd(35); }
                  }
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 29;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 5:
                  if ((0x47fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 98)
                        kind = 98;
                     { jjCheckNAddTwoStates(28, 32); }
                  }
                  if ((0x7fffffe97fffffeL & l) != 0L)
                  {
                     if (kind > 101)
                        kind = 101;
                     { jjCheckNAdd(35); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 99)
                        kind = 99;
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 61:
                  if ((0x47fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 98)
                        kind = 98;
                     { jjCheckNAddTwoStates(28, 32); }
                  }
                  if ((0x7fffffe97fffffeL & l) != 0L)
                  {
                     if (kind > 101)
                        kind = 101;
                     { jjCheckNAdd(35); }
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 29:
                  if ((0x47fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 98)
                        kind = 98;
                     { jjCheckNAddTwoStates(28, 32); }
                  }
                  if ((0x7fffffe97fffffeL & l) != 0L)
                  {
                     if (kind > 101)
                        kind = 101;
                     { jjCheckNAdd(35); }
                  }
                  if (curChar == 101)
                  {
                     if (kind > 98)
                        kind = 98;
                     { jjCheckNAddTwoStates(28, 32); }
                  }
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 1:
                  if (kind > 5)
                     kind = 5;
                  { jjAddStates(26, 28); }
                  break;
               case 8:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(29, 30); }
                  break;
               case 12:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 13:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  if (curChar == 92)
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 17:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(6, 8); }
                  break;
               case 18:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if (curChar == 92)
                     { jjCheckNAddStates(6, 8); }
                  break;
               case 22:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjAddStates(31, 32); }
                  break;
               case 26:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if ((0x47fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddTwoStates(28, 32); }
                  break;
               case 32:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 99)
                     kind = 99;
                  break;
               case 35:
                  if ((0x7fffffe97fffffeL & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  { jjCheckNAdd(35); }
                  break;
               case 42:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(33, 34); }
                  break;
               case 47:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(35, 36); }
                  break;
               case 52:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 53:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjAddStates(37, 38); }
                  break;
               case 56:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjAddStates(39, 40); }
                  break;
               case 57:
                  if (curChar == 126 && kind > 16)
                     kind = 16;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 59:
               case 28:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddTwoStates(28, 32); }
                  break;
               case 31:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 98)
                        kind = 98;
                     { jjCheckNAddTwoStates(28, 32); }
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 101)
                        kind = 101;
                     { jjCheckNAdd(35); }
                  }
                  break;
               case 60:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 98)
                        kind = 98;
                     { jjCheckNAddTwoStates(28, 32); }
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 101)
                        kind = 101;
                     { jjCheckNAdd(35); }
                  }
                  break;
               case 30:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 98)
                        kind = 98;
                     { jjCheckNAddTwoStates(28, 32); }
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 101)
                        kind = 101;
                     { jjCheckNAdd(35); }
                  }
                  break;
               case 5:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 98)
                        kind = 98;
                     { jjCheckNAddTwoStates(28, 32); }
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 99)
                        kind = 99;
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 100)
                        kind = 100;
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 101)
                        kind = 101;
                     { jjCheckNAdd(35); }
                  }
                  break;
               case 61:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 98)
                        kind = 98;
                     { jjCheckNAddTwoStates(28, 32); }
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 101)
                        kind = 101;
                     { jjCheckNAdd(35); }
                  }
                  break;
               case 29:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 98)
                        kind = 98;
                     { jjCheckNAddTwoStates(28, 32); }
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 101)
                        kind = 101;
                     { jjCheckNAdd(35); }
                  }
                  break;
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 5)
                     kind = 5;
                  { jjAddStates(26, 28); }
                  break;
               case 12:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(9, 11); }
                  break;
               case 17:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(6, 8); }
                  break;
               case 22:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(31, 32); }
                  break;
               case 26:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 33:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 99)
                     kind = 99;
                  break;
               case 34:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 100)
                     kind = 100;
                  break;
               case 35:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 101)
                     kind = 101;
                  { jjCheckNAdd(35); }
                  break;
               case 52:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 53:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(37, 38); }
                  break;
               case 56:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(39, 40); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 59 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\50", "\51", null, null, null, null, null, 
null, null, null, null, "\142\151\156\144", "\102\117\117\114\105\101\116", 
"\141\147\147\162\145\147\141\164\145", "\141\163\163\145\162\164", 
"\141\163\163\145\162\164\55\164\145\155\160\157\162\141\154", "\141\165\164\157\55\146\157\143\165\163", 
"\141\154\154\157\167\145\144\55\166\141\154\165\145\163", "\143\150\141\151\156\151\156\147\55\144\151\162\145\143\164\151\157\156", 
"\143\157\155\155\141\156\144", "\143\165\142\145\161\165\145\162\171", "\144\145\143\154\141\162\145", 
"\144\145\146\143\154\141\163\163", "\144\145\146\143\165\142\145", "\144\145\146\146\141\143\164", 
"\144\145\146\146\165\156\143\164\151\157\156", "\144\145\146\155\157\144\165\154\145", "\144\145\146\162\165\154\145", 
"\144\145\146\161\165\145\162\171", "\144\145\146\147\162\141\160\150\161\165\145\162\171", 
"\144\145\146\164\145\155\160\154\141\164\145", "\144\145\163\143\162\151\142\145\55\143\154\141\163\163", 
"\144\145\146\141\165\154\164", "\104\117\125\102\114\105", "\145\170\151\163\164\163", 
"\145\146\146\145\143\164\151\166\145\55\144\141\164\145", "\145\170\160\151\162\141\164\151\157\156\55\144\141\164\145", 
"\146\141\143\164\55\151\156\144\145\170", "\106\114\117\101\124", "\150\141\163\150\145\144\55\155\145\155\157\162\171", 
"\111\116\124\105\107\105\122", "\151\156\164\145\162\166\141\154\55\164\151\155\145", 
"\154\157\147\151\143\141\154", "\114\117\116\107", "\155\157\144\151\146\171", 
"\155\165\154\164\151\163\154\157\164", "\155\165\154\164\151\160\154\145", "\156\157\55\141\147\145\156\144\141", 
"\156\157\55\154\157\157\160", "\116\125\115\102\105\122", "\156\157\164", "\157\156\154\171", 
"\162\145\155\145\155\142\145\162\55\141\154\160\150\141", "\162\145\164\162\141\143\164", 
"\162\165\154\145\55\166\145\162\163\151\157\156", "\162\145\154\141\164\151\166\145\55\164\151\155\145", 
"\163\141\154\151\145\156\143\145", "\163\145\156\144", "\123\110\117\122\124", "\163\154\157\164", 
"\123\124\122\111\116\107", "\163\171\155\142\157\154", 
"\164\145\155\160\157\162\141\154\55\141\143\164\151\166\141\164\151\157\156", "\164\145\155\160\157\162\141\154", "\164\145\163\164", "\124\122\125\105", 
"\164\162\165\145", "\164\171\160\145", "\106\101\114\123\105", "\146\141\154\163\145", 
"\156\151\154", "\75\76", "\74\74\75", "\74\55", "\73", "\53", "\55", "\52", "\57", "\76", 
"\74", "\75\75", "\145\161", "\74\75", "\76\75", "\74\76", "\41\75", "\141\156\144", 
"\46", "\157\162", "\174", "\176", null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   t.image = curTokenImage;

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   46, 45, 47, 39, 38, 40, 17, 18, 20, 12, 13, 15, 52, 53, 56, 37, 
   39, 38, 40, 46, 45, 47, 37, 38, 6, 45, 1, 2, 4, 9, 10, 22, 
   23, 43, 44, 48, 49, 53, 55, 56, 58, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec8[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 6:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec15[i2] & l2) != 0L);
      default :
         if ((jjbitVec9[i1] & l1) != 0L)
            if ((jjbitVec10[i2] & l2) == 0L)
               return false;
            else
            return true;
         return false;
   }
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public CLIPSParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public CLIPSParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 59; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffffbc1L, 0x3fffffffffL, 
};
static final long[] jjtoSkip = {
   0x3eL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x20L, 0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[59];
    private final int[] jjstateSet = new int[2 * 59];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
